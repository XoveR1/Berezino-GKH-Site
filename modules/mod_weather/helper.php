<?php

/**
 *
 * $Id: helper.php 1.0.0 2012-03-10 09:50:52 Slava Poddubsky $
 * @package	    Weather Module 
 * @subpackage	Weather Module
 * @version     1.0.0
 * @description Module for show weather for Belarus cities from site http://www.meteonova.by/
 * @copyright	  Copyright © 2012 - All rights reserved.
 * @license		  GNU General Public License v2.0
 * @author		  Slava Poddubsky
 * @author mail	vicheslav.p@tut.by
 * @website		  http://berezinogkh.by
 *
 * CODE GENERATED BY: ALEXEY GORDEYEV IK CODE GENERATOR
 * HTTP://WWW.AGJOOMLA.COM/
 *
 *
 * The module methods
 * -------------------------------
 * getItems()
 *
 */
// no direct access
defined('_JEXEC') or die('Restricted access');

/**
 * Example Module Helper
 *
 * @package	Weather Module
 * @subpackage	Weather Module
 * @since 	1.0.0
 * @class       ModWeatherHelper
 */
class ModWeatherHelper {

    protected $weatherUrl = "http://www.meteonova.by/xml/%d.xml";
    protected $weatherXml = '';
    protected $weatherData = array();
    protected $errorCode = null;
    protected $params = null;
    
    public function getErrorCode() {
        return $this->errorCode;
    }
    
    public function getParams() {
        return $this->params;
    }

    public function setParams($params) {
        $this->params = $params;
    }

    public function getWeather() {
        if(!$this->loadData()){
            return false;
        }
        return $this->weatherData;
    }

    protected function loadData() {
        if (!function_exists('simplexml_load_string')) {
            $this->errorCode = 'SIMPLE_XML_NOT_INSTALLED';
            return false;
        }
        $cityId = (int) $this->params->get('city_id');
        if ($cityId == 0) {
            $this->errorCode = 'NO_CITY_ID';
            return false;
        }
        $rederedUrl = sprintf($this->weatherUrl, $cityId);
        $xmlCode = file_get_contents($rederedUrl);
        $this->weatherXml = simplexml_load_string($xmlCode);
        $this->parseWeather();
        return true;
    }
    
    protected function parseWeather(){
        foreach($this->weatherXml->REPORT->TOWN->FORECAST as $forecast){
            $weatherItem = new stdClass();
            $hour = (string)$forecast['hour'];
            $month = (string)$forecast['month'];
            $day = (string)$forecast['day'];
            $year = (string)$forecast['year'];
            $weatherItem->datetime = mktime($hour, 0, 0, $month, $day, $year);
            switch($hour){
                case '3': $weatherItem->dayperiod = 'NIGHT';                    
                    break;
                case '9': $weatherItem->dayperiod = 'MORNING';                    
                    break;
                case '15': $weatherItem->dayperiod = 'AFTERNOON';                    
                    break;
                case '21': $weatherItem->dayperiod = 'EVENING';                    
                    break;
            }
            
            $weatherItem->temperature = new stdClass();
            $weatherItem->temperature->min = 
                    (string)$forecast->TEMPERATURE['min'];
            $weatherItem->temperature->max = 
                    (string)$forecast->TEMPERATURE['max'];
            
            $weatherItem->phenomena = new stdClass();
            $weatherItem->phenomena->cloudiness = 
                    (string)$forecast->PHENOMENA['cloudiness'];
            $weatherItem->phenomena->precipitation = 
                    (string)$forecast->PHENOMENA['precipitation'];
            $this->weatherData[] = $weatherItem;
        }
    }

}

?>